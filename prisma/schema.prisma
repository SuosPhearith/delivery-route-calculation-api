generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Gender {
  male
  female
}

model Role {
  id   Int    @id @default(autoincrement())
  name String
  User User[]
}

model User {
  id          Int           @id @default(autoincrement())
  name        String
  email       String        @unique
  password    String
  role        Role          @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId      Int
  status      Boolean       @default(true)
  avatar      String?
  gender      Gender?
  session     Int           @default(1)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  UserSession UserSession[]
  Truck       Truck[]
  Driver      Driver?
  Assistant   Assistant?
}

model UserSession {
  id           Int      @id @default(autoincrement())
  userId       Int
  sessionToken String   @unique @default(uuid())
  device       String
  browser      String
  createdAt    DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model LicenseType {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  Driver      Driver[]
}

enum DriverStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  TERMINATED
}

model Assistant {
  id             Int              @id @default(autoincrement())
  user           User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         Int              @unique
  phone          String
  age            Int?
  status         DriverStatus     @default(ACTIVE)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  TruckAssistant TruckAssistant[]
}

model Driver {
  id            Int          @id @default(autoincrement())
  user          User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        Int          @unique
  phone         String
  age           Int?
  licenseId     String       @unique
  licenseType   LicenseType  @relation(fields: [licenseTypeId], references: [id])
  licenseTypeId Int
  status        DriverStatus @default(ACTIVE)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  Truck         Truck[]
}

enum KeycloakAccountRole {
  admin
  manager
  driver
  assisant
}

model KeycloakAccount {
  id        Int                 @id @default(autoincrement())
  email     String              @unique
  username  String              @unique
  name      String
  client_id String
  Role      KeycloakAccountRole
}

model Fuel {
  id          Int     @id @default(autoincrement())
  name        String  @unique
  description String?
  Truck       Truck[]
}

model TruckSize {
  id              Int     @id @default(autoincrement())
  name            String  @unique
  containerLenght Float
  containerWeight Float
  containerHeight Float
  containerCubic  Float
  Truck           Truck[]
}

model CaseSize {
  id         Int    @id @default(autoincrement())
  name       String @unique
  caseLenght Float
  caseWeight Float
  caseHeight Float
  caseCubic  Float
}

enum TruckStatus {
  AVAILABLE
  IN_USE
  MAINTENANCE
}

model Truck {
  id             Int              @id @default(autoincrement())
  truckSize      TruckSize        @relation(fields: [truckSizeId], references: [id])
  truckSizeId    Int
  fuel           Fuel             @relation(fields: [fuelId], references: [id])
  fuelId         Int
  driver         Driver           @relation(fields: [driverId], references: [id])
  licensePlate   String           @unique
  model          String?
  manufacturer   String?
  status         TruckStatus      @default(AVAILABLE)
  driverId       Int
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  createdBy      User?            @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId         Int?
  TruckAssistant TruckAssistant[]
}

model TruckAssistant {
  id          Int       @id @default(autoincrement())
  truck       Truck     @relation(fields: [truckId], references: [id])
  truckId     Int
  assisant    Assistant @relation(fields: [assistantId], references: [id])
  assistantId Int
}

model System {
  id              Int   @id @default(autoincrement())
  speed           Float @default(40)
  dropOffDuration Int   @default(2)
}
