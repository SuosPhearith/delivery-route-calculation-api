generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Gender {
  male
  female
}

model Role {
  id   Int    @id @default(autoincrement())
  name String
  User User[]
}

model User {
  id          Int           @id @default(autoincrement())
  name        String
  email       String        @unique
  password    String
  role        Role          @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId      Int
  status      Boolean       @default(true)
  avatar      String?
  gender      Gender?
  session     Int           @default(1)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  UserSession UserSession[]
  Driver      Driver?
  Assistant   Assistant?
}

model UserSession {
  id           Int      @id @default(autoincrement())
  userId       Int
  sessionToken String   @unique @default(uuid())
  device       String
  browser      String
  createdAt    DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model LicenseType {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  Driver      Driver[]
}

enum DriverStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  TERMINATED
}

model Assistant {
  id        Int          @id @default(autoincrement())
  user      User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int          @unique
  phone     String
  age       Int?
  status    DriverStatus @default(ACTIVE)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
}

model Driver {
  id            Int          @id @default(autoincrement())
  user          User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        Int          @unique
  phone         String
  age           Int?
  licenseId     String       @unique
  licenseType   LicenseType  @relation(fields: [licenseTypeId], references: [id])
  licenseTypeId Int
  status        DriverStatus @default(ACTIVE)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

enum KeycloakAccountRole {
  ADMIN
  MANAGER
  DRIVER
  ASSISTANT
}

enum AccountStatus {
  ACTIVE
  PENDING
  INACTIVE
}

model KeycloakAccount {
  id             Int                 @id @default(autoincrement())
  email          String              @unique
  username       String              @unique
  name           String
  client_id      String
  status         AccountStatus       @default(ACTIVE)
  Role           KeycloakAccountRole
  TruckAssistant TruckAssistant[]
  TruckDriver    TruckDriver[]
}

model Fuel {
  id          Int     @id @default(autoincrement())
  name        String  @unique
  description String?
  Truck       Truck[]
}

model TruckSize {
  id              Int        @id @default(autoincrement())
  name            String     @unique
  containerLenght Float
  containerWidth  Float
  containerHeight Float
  containerCubic  Float
  Truck           Truck[]
  Location        Location[]
}

model CaseSize {
  id          Int           @id @default(autoincrement())
  name        String        @unique
  caseLenght  Float
  caseWidth   Float
  caseHeight  Float
  caseCubic   Float
  Requirement Requirement[]
}

enum TruckStatus {
  AVAILABLE
  IN_USE
  MAINTENANCE
}

model Truck {
  id                   Int                 @id @default(autoincrement())
  truckSize            TruckSize?          @relation(fields: [truckSizeId], references: [id], onDelete: SetNull)
  truckSizeId          Int?
  fuel                 Fuel?               @relation(fields: [fuelId], references: [id], onDelete: SetNull)
  fuelId               Int?
  licensePlate         String              @unique
  model                String?
  manufacturer         String?
  functioning          String?
  status               TruckStatus         @default(AVAILABLE)
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt
  zone                 Zone?               @relation(fields: [zoneId], references: [id], onDelete: SetNull)
  zoneId               Int?
  warehouse            Warehouse?          @relation(fields: [warehouseId], references: [id], onDelete: SetNull)
  warehouseId          Int?
  truckOwnershipType   TruckOwnershipType? @relation(fields: [truckOwnershipTypeId], references: [id], onDelete: SetNull)
  truckOwnershipTypeId Int?
  TruckAssistant       TruckAssistant[]
  TruckDriver          TruckDriver[]
  TruckByDate          TruckByDate[]
}

model TruckAssistant {
  id          Int             @id @default(autoincrement())
  truck       Truck           @relation(fields: [truckId], references: [id], onDelete: Cascade)
  truckId     Int
  assistant   KeycloakAccount @relation(fields: [assistantId], references: [id], onDelete: Cascade)
  assistantId Int
}

model TruckDriver {
  id             Int             @id @default(autoincrement())
  truck          Truck           @relation(fields: [truckId], references: [id], onDelete: Cascade)
  truckId        Int
  driver         KeycloakAccount @relation(fields: [driverId], references: [id], onDelete: Cascade)
  driverId       Int
  deliveryAmount Int?
}

model System {
  id              Int   @id @default(autoincrement())
  speed           Float @default(40)
  dropOffDuration Int   @default(2)
}

model Zone {
  id                Int              @id @default(autoincrement())
  code              String           @unique
  name              String
  truckAmount       Int?
  description       String?
  officerControll   OfficerControll? @relation(fields: [officerControllId], references: [id])
  Truck             Truck[]
  officerControllId Int?
  Location          Location[]
}

model OfficerControll {
  id          Int     @id @default(autoincrement())
  name        String  @unique
  description String?
  Zone        Zone[]
}

model Warehouse {
  id          Int     @id @default(autoincrement())
  name        String  @unique
  lat         Float
  long        Float
  information String
  Truck       Truck[]
}

model TruckOwnershipType {
  id          Int     @id @default(autoincrement())
  name        String  @unique
  description String?
  Truck       Truck[]
}

model GroupDirection {
  id        Int         @id @default(autoincrement())
  group     String      @unique
  note      String?
  file      String?
  createdAt DateTime    @default(now())
  Direction Direction[]
}

model Direction {
  id               Int            @id @default(autoincrement())
  route            String?
  lat              Float
  long             Float
  name             String?
  status           String
  type             String
  groupDirection   GroupDirection @relation(fields: [groupDirectionId], references: [id], onDelete: Cascade)
  groupDirectionId Int
}

model DeliveryRouteCalculationDate {
  id                    Int                     @id @default(autoincrement())
  date                  DateTime                @unique
  Location              Location[]
  TruckByDate           TruckByDate[]
  AssignLocationToTruck AssignLocationToTruck[]
}

enum Priority {
  CRITICAL
  HIGH
  MEDIUM
  LOW
  TRIVIAL
}

enum PartOfDay {
  MORNING // 5am - 12pm
  AFTERNOON // 12pm - 5pm
  EVENING // 5pm - 9pm
  NIGHT //9pm - 5am
}

model Location {
  id                             Int                          @id @default(autoincrement())
  zone                           Zone?                        @relation(fields: [zoneId], references: [id], onDelete: SetNull)
  truckSize                      TruckSize?                   @relation(fields: [truckSizeId], references: [id], onDelete: SetNull)
  documentType                   String?
  documentNumber                 String?
  documentDate                   String?
  sla                            String?
  uploaddTime                    DateTime?
  latitude                       Float
  longitude                      Float
  locationName                   String
  phone                          String
  se                             String
  homeNo                         String?
  streetNo                       String?
  village                        String?
  sangkat                        String?
  khan                           String?
  hotSpot                        String?
  direction                      String?
  area                           String?
  region                         String?
  division                       String?
  zoneId                         Int?
  truckSizeId                    Int?
  deliveryDate                   DateTime
  paymentTerm                    String?
  comments                       String?
  priority                       Priority
  partOfDay                      PartOfDay
  Requirement                    Requirement[]
  deliveryRouteCalculationDate   DeliveryRouteCalculationDate @relation(fields: [deliveryRouteCalculationDateId], references: [id], onDelete: Cascade)
  capacity                       Float?
  isAssign                       Boolean                      @default(false)
  deliveryRouteCalculationDateId Int
  AssignLocationToTruck          AssignLocationToTruck[]
}

model Requirement {
  id         Int      @id @default(autoincrement())
  location   Location @relation(fields: [locationId], references: [id], onDelete: Cascade)
  locationId Int
  caseSize   CaseSize @relation(fields: [caseSizeId], references: [id], onDelete: Cascade)
  caseSizeId Int
}

model TruckByDate {
  id                             Int                           @id @default(autoincrement())
  capacity                       Float?
  endTime                        DateTime?
  status                         TruckStatus                   @default(AVAILABLE)
  truck                          Truck                         @relation(fields: [truckId], references: [id], onDelete: Cascade)
  truckId                        Int
  deliveryRouteCalculationDate   DeliveryRouteCalculationDate? @relation(fields: [deliveryRouteCalculationDateId], references: [id], onDelete: SetNull)
  deliveryRouteCalculationDateId Int?
  AssignLocationToTruck          AssignLocationToTruck[]
}

model AssignLocationToTruck {
  id                             Int                          @id @default(autoincrement())
  location                       Location                     @relation(fields: [locationId], references: [id])
  locationId                     Int
  truckByDate                    TruckByDate                  @relation(fields: [truckByDateId], references: [id])
  truckByDateId                  Int
  deliveryRouteCalculationDate   DeliveryRouteCalculationDate @relation(fields: [deliveryRouteCalculationDateId], references: [id], onDelete: Cascade)
  deliveryRouteCalculationDateId Int

  @@unique([locationId, deliveryRouteCalculationDateId]) // Unique composite index for locationId and deliveryRouteCalculationDateId
}
